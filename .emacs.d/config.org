#+TITLE: serpent swarm's emacs config
#+STARTUP: indent
#+AUTHOR: Vladimir Stetsyuk

* INFO, HINTS, TIPS, SOURCES e.c.
https://github.com/MatthewZMD/.emacs.d

https://github.com/larstvei/dot-emacs/tree/master

* PACKAGE MANAGEMENT

** Setup package.el to work with MELPA.

#+begin_src emacs-lisp :noindent

  (require 'gnutls)
  (add-to-list 'gnutls-trustfiles "/etc/libressl/cert.pem")
  (require 'package)

  (setq package-archives
        '(("melpa-stable" . "https://stable.melpa.org/packages/")
          ("nongnu" . "https://elpa.nongnu.org/nongnu/")
          ("elpa" . "https://elpa.gnu.org/packages/")))

  ;; (package-refresh-contents) ;; uncomment if have high net speed
  (package-initialize)

#+end_src

#+RESULTS:

** Installing use-package

#+begin_src emacs-lisp

(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)

#+end_src

* GRAPHICAL USER INTERFACE SETTINGS

** FONT

#+begin_src emacs-lisp

(setenv "XFT_ANTI_ALIAS" "true")   ; Включить сглаживание шрифтов
(setenv "XFT_HINTING" "true")      ; Включить подстройку шрифтов
(set-face-attribute 'default nil :family "Hack" :height 110) ;; (frame-parameter nil 'font)

#+end_src

** Menu, toolbar, scrollbar e.c.

#+begin_src emacs-lisp

(tool-bar-mode -1)
(menu-bar-mode -1)
(tool-bar-mode -1)
(blink-cursor-mode -1)
(electric-pair-mode 1)
(set-fringe-mode 10)

#+end_src

** Treemacs

#+begin_src emacs-lisp
  
(use-package treemacs
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (setq treemacs-is-never-other-window t
        treemacs-width 30
        treemacs-show-cursor nil)
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t t"   . treemacs)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag)))

(use-package treemacs-projectile
  :after (treemacs projectile))

(use-package treemacs-magit
  :after (treemacs magit))
#+end_src

** Olivetti

Olivetti is a package that simply centers the text of a buffer. 

#+begin_src emacs-lisp

(use-package olivetti
  :defer t
  :bind (:map custom-bindings-map ("C-c o" . olivetti-mode))
  :config
  (setq-default olivetti-body-width (+ fill-column 3)))

#+end_src

** Lines

#+begin_src emacs-lisp

;; (setq show-paren-style 'expression)
(global-display-line-numbers-mode 1)
(dolist (mode '(show-paren-mode
                org-mode-hook
                term-mode-hook
                shell-mode-hook
                eshell-mode-hook
                ))
  (add-hook mode (lambda() (display-line-numbers-mode 0))))

(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

** Buffer

#+begin_src emacs-lisp

(defalias 'list-buffers 'ibuffer)

#+end_src

* GENERAL CONFIGURATION

#+begin_src emacs-lisp

(defvar custom-bindings-map (make-sparse-keymap)
  "A keymap for custom bindings.")
  
#+end_src

#+begin_src emacs-lisp

(use-package which-key
  :init (which-key-mode 1)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 1))

#+end_src

* COMPLETIONS

Vertico + Consult + Orderless + Embark + Marginalia + Corfu

** Vertico 

#+begin_src emacs-lisp

(use-package vertico
  :init
  (vertico-mode 1)
  :config
  (setq vertico-count 25))

(use-package vertico-posframe
  :config
  (vertico-posframe-mode 1)
  (setq vertico-posframe-width 100
        vertico-posframe-height vertico-count))

#+end_src

** Savehist

Save minibuffer history

#+begin_src emacs-lisp

(use-package savehist
  :init
  (savehist-mode 1))

#+end_src

** Marginalia

#+begin_src emacs-lisp

(use-package marginalia
  :init 
  (marginalia-mode 1))

#+end_src

** Corfu

#+begin_src emacs-lisp

(use-package corfu
  :init
  (global-corfu-mode 1)
  (corfu-popupinfo-mode 1)
  :config
  (setq corfu-cycle t
        corfu-auto t
        corfu-auto-delay 0
        corfu-auto-prefix 2
        corfu-popupinfo-delay 0.5))

#+end_src

** Orderless

#+begin_src emacs-lisp

(use-package orderless
  :config
  (setq completion-styles '(orderless basic partial-completion)
        completion-category-overrides '((file (styles basic partial-completion)))
        orderless-component-separator "[ |]"))

#+end_src

** Consult

#+begin_src emacs-lisp



(use-package consult
  :bind (:map custom-bindings-map
              ("C-x b" . consult-buffer)
              ("C-c r" . consult-ripgrep))
  :config
  (setq consult-preview-key (list :debounce 0.1 'any)))

#+end_src



* COMMAND LINE

#+begin_src emacs-lisp
(use-package vterm
  :commands vterm
  :bind ((:map vterm-mode-map
               ("C-y" . vterm-yank)
               ("M-y" . vterm-yank-pop)
               ("C-q" . vterm-send-next-key)
               ("C-z" . nil)
               ("M-:" . nil)))
  :custom
  (vterm-kill-buffer-on-exit t)
  (vterm-max-scrollback 10000)
  (vterm-buffer-name-string "vterm %s"))

(use-package vterm
  :defer t
  :preface
  (defvar vterms nil)

  (defun toggle-vterm (&optional n)
    (interactive)
    (setq vterms (seq-filter 'buffer-live-p vterms))
    (let ((default-directory (or (vc-root-dir) default-directory)))
     (cond ((numberp n) (push (vterm n) vterms))
           ((null vterms) (push (vterm 1) vterms))
           ((seq-contains-p vterms (current-buffer))
            (switch-to-buffer (car (seq-difference (buffer-list) vterms))))
           (t (switch-to-buffer (car (seq-intersection (buffer-list) vterms)))))))

  :bind (:map custom-bindings-map
              ("C-z" . toggle-vterm)
              ("M-1" . (lambda () (interactive) (toggle-vterm 1)))
              ("M-2" . (lambda () (interactive) (toggle-vterm 2)))
              ("M-3" . (lambda () (interactive) (toggle-vterm 3)))
              ("M-4" . (lambda () (interactive) (toggle-vterm 4)))
              ("M-5" . (lambda () (interactive) (toggle-vterm 5)))
              ("M-6" . (lambda () (interactive) (toggle-vterm 6)))
              ("M-7" . (lambda () (interactive) (toggle-vterm 7)))
              ("M-8" . (lambda () (interactive) (toggle-vterm 8)))
              ("M-9" . (lambda () (interactive) (toggle-vterm 9))))

  :config
  ;; Don't query about killing vterm buffers, just kill it
  (advice-add vterm (after kill-with-no-query nil activate)
    (set-process-query-on-exit-flag (get-buffer-process ad-return-value) nil)))

#+end_src
#+begin_src emacs-lisp

(defalias 'yes-or-no-p 'y-or-n-p)

#+end_src
#+begin_src emacs-lisp

(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 0.3)
  )

#+end_src

** Command log mode

#+begin_src emacs-lisp
;;(use-package command-log-mode)
#+end_src

* GLOBAL SETTINGS

#+begin_src emacs-lisp

(setq initial-scratch-message nil )

;; rewrite selection
(delete-selection-mode t)

(setq-default indicate-empty-lines t)

#+end_src

** ORG-MODE                                                       :todolink:

#+begin_src emacs-lisp

(setq org-return-follows-link t)

(defun org-bol-open-line ()
  "Go to beginning of line and insert a blank line above, like open-line at BOL."
  (interactive)
  (beginning-of-line)
  (open-line 1))

;; Bind to C-S-o in org-mode
(with-eval-after-load 'org
  (define-key org-mode-map (kbd "C-S-o") #'org-bol-open-line))

;; (add-hook 'org-mode-hook
;;           (lambda ()
;;             (local-set-key (kbd "C-S-o") 
;;                            (lambda ()
;;                              (interactive)
;;                              (move-beginning-of-line 1)
;;                              (newline)))))

#+end_src

* DASHBOARD

#+begin_src emacs-lisp
;; (defface dashboard-separator-face
;;     '((t (:foreground "#5f5f5f" :weight bold)))
;;     "Face for dashboard separator.")
(use-package page-break-lines)
(use-package dashboard
  :init
    
  (setq dashboard-projects-backend 'projectile)

  (setq dashboard-projects-switch-function
        #'my/open-project-with-perspective)
  
  (setq ;;dashboard-projects-backend 'projectile
        dashboard-set-footer nil
        dashboard-center-content t
        ;;dashboard-page-separator "\n\n\n"
        ;;dashboard-page-separator  "\n──────────────────────────────────────────────────\n"
                    
        dashboard-set-heading-icons t
        dashboard-set-file-icons t
        dashboard-items '((recents . 10)
                          (projects . 5)
                          (bookmarks . 5)
                          (agenda . 5)
                          (registers . 5))
        )

  :config
  
  (defun my/open-project-with-perspective (project)
    "Открывает PROJECT сессией persp и treemacs."
    (let* ((project-root (expand-file-name project))
           (project-name (file-name-nondirectory (directory-file-name project-root)))
           (persp-file (expand-file-name (concat project-name ".persp") persp-save-dir)))
    
      (persp-switch project-name)
      
      (when (file-exists-p persp-file)
        (persp-load-state-from-file persp-file))

      (let ((default-directory project-root))
        (treemacs-add-and-display-current-project-exclusively))))

  (defun my/projectile-open-project ()
    "Обёртка для projectile-switch-project-action."
    (my/open-project-with-perspective (projectile-project-root)))
  
  (with-eval-after-load 'dashboard
    (setq dashboard-startupify-list
          (remove 'dashboard-insert-banner dashboard-startupify-list))
    (setq dashboard-startupify-list
          (remove 'dashboard-insert-init-info dashboard-startupify-list))
    (setq dashboard-startupify-list
          (remove 'dashboard-insert-banner-title dashboard-startupify-list)))
    
    (dashboard-setup-startup-hook))

;;(setq initial-buffer-choice (lambda () (switch-to-buffer "*dashboard*")))
(defun save-project-session-on-exit ()
  "Сохраняет сессию persp перед выходом, если находимся в проекте."
  (when (and (fboundp 'projectile-project-p)
             (projectile-project-p))
    (let ((project-name (projectile-project-name)))
      (when project-name
        (persp-save-state-to-file
         (expand-file-name (concat project-name ".persp") persp-save-dir))))))

(setq projectile-switch-project-action #'dashboard-open-project)

(add-hook 'kill-emacs-hook #'save-project-session-on-exit)

#+end_src
  
* DEVELOPMENT

** DESKTOP

#+begin_src emacs-lisp

(use-package persp-mode
  :init
  (setq persp-autokill-buffer-on-remove 'kill-weak)
  (setq persp-init-frame-behaviour nil)
  (setq persp-auto-resume-time -1) 
  (setq persp-set-last-persp-for-new-frames nil)
  (setq persp-save-dir (expand-file-name "persp-sessions/" user-emacs-directory))
  (setq persp-mode-init-frame-behaviour 'none)
  (setq persp-auto-save-opt 0)
  (add-hook 'kill-emacs-hook #'persp-save-state-to-file)
  :config
  (persp-mode)
  )

#+end_src

** MAGIT

#+begin_src emacs-lisp

(use-package magit
  :commands (magit-status magit-get-current-branch)
  :custom
  (magit-display-buffer-function 'magit-display-buffer-same-window-except-diff-v1))

#+end_src

* SPELLING

** Flyspell

   Flyspell offers on-the-fly spell checking.

   When working with several languages, we should be able to cycle through the
   languages we most frequently use. Every buffer should have a separate cycle
   of languages, so that cycling in one buffer does not change the state in a
   different buffer (this problem occurs if you only have one global cycle). We
   can implement this by using a [[http://www.gnu.org/software/emacs/manual/html_node/elisp/Closures.html][closure]].

   #+begin_src emacs-lisp

   (defun cycle-languages ()
     "Changes the ispell dictionary to the first element in
   ISPELL-LANGUAGES, and returns an interactive function that cycles
   the languages in ISPELL-LANGUAGES when invoked."
     (let ((ispell-languages (list "american" "russian")))
       (lambda ()
         (interactive)
         ;; Rotates the languages cycle and changes the ispell dictionary.
         (let ((rotated (nconc (cdr ispell-languages) (list (car ispell-languages)))))
           (ispell-change-dictionary (car (setq ispell-languages rotated)))))))

   #+end_src

   We enable =flyspell-mode= for all text-modes, and use =flyspell-prog-mode=
   for spell checking comments and strings in all programming modes. We bind
   =C-c f= to a function returned from =cycle-languages=, giving a language
   switcher for every buffer where flyspell is enabled.

   #+begin_src emacs-lisp

   (use-package flyspell
     :defer t
     :if (executable-find "aspell")
     :hook ((text-mode . flyspell-mode)
            (prog-mode . flyspell-prog-mode)
            (flyspell-mode . (lambda ()
                               (local-set-key
                                (kbd "C-c f")
                                (cycle-languages)))))
     :config
     (ispell-change-dictionary "american" t))

   #+end_src

** Define word

   This super neat package looks up the word at point.

   #+begin_src emacs-lisp
   
   ;; display the definition of word at point
   (use-package define-word
     :defer t
     :bind (:map custom-bindings-map ("C-c D" . define-word-at-point)))

   #+end_src

** LANGUAGES

*** LSP

#+begin_src emacs-lisp

(use-package eglot
  :defer t
  :hook ((python-mode django-mode web-mode rust-ts-mode) . eglot-ensure)
  :config
  (setq eglot-events-buffer-size 0)
  (add-to-list 'eglot-server-programs
               '((python-mode django-mode) . ("pyright-langserver" "--stdio")))
  (add-to-list 'eglot-server-programs
               '(web-mode . ("vscode-html-language-server" "--stdio")))
  (add-to-list 'eglot-server-programs
               '(rust-ts-mode . ("rust-analyzer"))))
#+end_src

*** RUST

#+begin_src emacs-lisp
;;(use-package rust)
#+end_src

*** DART

#+begin_src emacs-lisp

(use-package dart-mode
  ;;:hook (dart-mode . lsp-deferred)
  :config
  (global-set-key (kbd "C-<f9>") 'lsp-dart-run)
  )
;; (use-package lsp-dart
;;   :hook (dart-mode . lsp)
;;   )

#+end_src

*** GO

#+begin_src emacs-lisp

(use-package go-mode
  :mode "\\.go\\'"
  :init
  ;; Format Go code before saving
  (add-hook 'go-mode-hook #'gofmt-before-save)
  :config
  ;; Use goimports instead of gofmt
  (setq gofmt-command "goimports")
  ;; Indentation settings
  ;;(setq-default indent-tabs-mode nil)
  ;;(setq-default tab-width 4)
  ;; Keybindings
  (define-key go-mode-map (kbd "C-c C-r") 'go-remove-unused-imports)
  (define-key go-mode-map (kbd "C-c C-g") 'go-goto-imports)
  (define-key go-mode-map (kbd "C-c C-f") 'gofmt)
  ;; Optional: show documentation at point (requires godoc)
  (add-hook 'go-mode-hook #'godoc-at-point))

(provide 'go-mode-config)

#+end_src

*** DOCKER

#+begin_src emacs-lisp

(use-package dockerfile-mode)

#+end_src

*** PYTHON|DJANGO

#+begin_src emacs-lisp

(use-package python-black
  :demand t
  :hook (python-mode . python-black-on-save-mode))

#+end_src

#+begin_src emacs-lisp
  
(use-package django-mode
  ;;:hook (django-mode . lsp-deferred)
  :mode ("\\.html$" . django-html-mode)
  ;;:config
  )  

#+end_src

#+begin_src emacs-lisp

(use-package pyvenv
  :config
  (setq pyvenv-virtualenv-wrapper-workon "~/devel/python/environment")
  (pyvenv-mode 1)
  )

#+end_src

*** WEB-MODE

#+begin_src emacs-lisp

(use-package web-mode
  :mode ("\\.html\\'" . web-mode)
  :config
  
  (setq web-mode-enable-auto-closing t
        web-mode-enable-auto-quoting t
        web-mode-enable-current-element-highlight t)

  
  ;; Распознавание Django template syntax
  (setq web-mode-engines-alist
        '(("django" . "\\.html\\'")))

  ;; Настройки отступов (опционально)
  (setq web-mode-markup-indent-offset 2
        web-mode-css-indent-offset 2
        web-mode-code-indent-offset 2))

#+end_src

*** EMMET

#+begin_src emacs-lisp

(use-package emmet-mode
  :hook ((web-mode css-mode) . emmet-mode)
  :config
  (setq emmet-self-closing-tag-style " /"))

#+end_src

*** LUA

#+begin_src emacs-lisp

(use-package lua-mode
  )

#+end_src

** PROJECTILE

#+begin_src emacs-lisp

(use-package projectile
  :config
  (projectile-global-mode 1)
  
  :bind-keymap
  ("C-c p" . projectile-command-map)
  )

(with-eval-after-load 'projectile
  (add-hook 'projectile-after-switch-project-hook 'treemacs-project-follow-mode))

#+end_src
  
* SNIPPETS

#+begin_src emacs-lisp
;; YASNIPET PACKAGE

(use-package yasnippet
  :diminish yas-minor-mode
  :init
  (use-package yasnippet-snippets :after yasnippet)
  :bind
  ;;(:map yas-key)
  :config
  (yas-reload-all)
  (setq yas-indent-line 'auto)
  (yas-global-mode 1)
  )

#+end_src


* INTENDATION SETTINGS

#+begin_src emacs-lisp

;; 
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
(setq-default c-basic-offset 4)
(setq-default standard-indent 4)
(setq-default python-indent-offset 4)

;; switch beggining of lines
(global-set-key (kbd "C-a")         'back-to-indentation)
(global-set-key (kbd "C-S-a")       'move-beginning-of-line)
(setq-default org-edit-src-content-indentation 0)

#+end_src

* FUNCTIONS

#+begin_src emacs-lisp

#+end_src
  
* KEYBINDINGS

** MULTILINGUAL INPUT SUPPORT

#+begin_src emacs-lisp
(use-package reverse-im
  :config
  (setq reverse-im-input-methods '("russian-computer"))
  (reverse-im-mode 1))
#+end_src

** GLOBAL

#+begin_src emacs-lisp

;; truncate lines
(global-set-key (kbd "<C-M-return>")'toggle-truncate-lines)
;; whitespace mode
(global-set-key (kbd "<f7>")        'whitespace-mode)
;; comment/uncomment
(global-set-key (kbd "C-;")         'comment-or-uncomment-region)
;; make Ctrl-` sequence waiting for work with windows and align region
(define-prefix-command 'ctr-w-pref)

;; kill whole line with indents by default
(global-set-key (kbd "C-k")         'kill-whole-line)
(global-set-key (kbd "C-K")         'kill-line)
;; change word/char moving
(global-set-key (kbd "C-f")         'forward-word)
(global-set-key (kbd "C-b")         'backward-word)
(global-set-key (kbd "M-f")         'forward-char)
(global-set-key (kbd "M-b")         'backward-char)
;; killing word
(global-set-key (kbd "C-,")         'backward-kill-word)
(global-set-key (kbd "C-.")         'kill-word)
;; use 'alt for changing windows

#+end_src

** BUFFER CHANGES

#+begin_src emacs-lisp

(global-set-key (kbd "C-<iso-lefttab>")   'bs-cycle-next)
(global-set-key (kbd "C-<tab>")     'bs-cycle-previous)
(global-set-key (kbd "<f5>")        'save-buffer)
(global-set-key (kbd "<f6>")        'revert-buffer)
(global-set-key (kbd "<f2>")        'bs-show)
(global-set-key (kbd "<f12>")       'treemacs)

#+end_src
** WINDOW NAVIGATION

#+begin_src emacs-lisp
(define-prefix-command 'ctr-q-pref)
(global-set-key (kbd "C-q")             'ctr-q-pref)
(define-key ctr-q-pref (kbd "j")        'next-multiframe-window)
(define-key ctr-q-pref (kbd "k")        'previous-multiframe-window)
(define-key ctr-q-pref (kbd "<up>")     'windmove-up)
(define-key ctr-q-pref (kbd "<down>")   'windmove-down)
(define-key ctr-q-pref (kbd "<left>")   'windmove-left)
(define-key ctr-q-pref (kbd "<right>")  'windmove-right)
(define-key ctr-q-pref (kbd "g")        'goto-line)
(define-key ctr-q-pref (kbd "a")        'align-regexp)
;; (define-key ctr-q-pref (kbd "C-j")  'scroll-down-command)
;; (define-key ctr-q-pref (kbd "C-k")  'scroll-up-command)
;; (define-key ctr-q-pref (kbd "v")    'scroll-other-window)
;; (define-key ctr-q-pref (kbd "p")    'scroll-other-window-down)
(define-key ctr-q-pref (kbd "s")        'set-window-width)
#+end_src

** LOST

#+begin_src emacs-lisp
(global-set-key (kbd "C-`")             'quoted-insert)
#+end_src

** EXECUTIONS

#+begin_src emacs-lisp

(global-set-key (kbd "<f9>")         'compile)
(global-set-key (kbd "<C-f12>")      'eval-buffer)

#+end_src

* THEME
#+begin_src emacs-lisp

(use-package doom-themes
  :config
  (load-theme 'doom-one t)
  )

(use-package doom-modeline
  :config
  (doom-modeline-mode 1)
  :custom
  (doom-modeline-height 25))

#+end_src

* EVIL MODE
#+begin_src emacs-lisp

#+end_src

