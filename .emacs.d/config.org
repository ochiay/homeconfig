#+TITLE: serpent swarm's emacs config
#+STARTUP: indent
#+AUTHOR: Vladimir Stetsyuk

* INFO, HINTS, TIPS, SOURCES e.c.
https://www.reddit.com/r/emacs/comments/117zdnu/what_are_the_benefits_of_vertico_over_helm_or_ivy/

https://github.com/larstvei/dot-emacs/tree/master

* PACKAGE MANAGEMENT

** Setup package.el to work with MELPA.

#+begin_src emacs-lisp :noindent

(require 'package)
(add-to-list
 'package-archives
 '("melpa" . "https://melpa.org/packages/")
 '("elpa" . "https://elpa.gnu.org/packages/"))
;; uncomment if have high net speed
;; (package-refresh-contents)
;; (package-initialize)

#+end_src

** Installing use-package

#+begin_src emacs-lisp

;; (unless package-archive-contents
;;   (package-refresh-contents))

(unless (package-installed-p 'use-package)
  (package-install 'use-package))

#+end_src

* GRAPHICAL USER INTERFACE SETTINGS

** Menu, toolbar, scrollbar e.c.

#+begin_src emacs-lisp

(tool-bar-mode -1)
(menu-bar-mode -1)
(blink-cursor-mode -1)
(set-fringe-mode 10)

#+end_src

** Olivetti

Olivetti is a package that simply centers the text of a buffer. 

#+begin_src emacs-lisp

(use-package olivetti
  :ensure t
  :defer t
  :bind (:map custom-bindings-map ("C-c o" . olivetti-mode))
  :config
  (setq-default olivetti-body-width (+ fill-column 3)))

#+end_src

** Lines

#+begin_src emacs-lisp

;; (setq show-paren-style 'expression)
(global-display-line-numbers-mode 1)
(dolist (mode '(show-paren-mode
                org-mode-hook
                term-mode-hook
                shell-mode-hook
                eshell-mode-hook
                ))
  (add-hook mode (lambda() (display-line-numbers-mode 0))))

(use-package rainbow-delimiters
  :ensure t
  :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

** Electric

#+begin_src emacs-lisp
(electric-pair-mode 1)
#+end_src

** Buffer

#+begin_src emacs-lisp

(defalias 'list-buffers 'ibuffer)

#+end_src

* General Configuration

#+begin_src emacs-lisp

(use-package which-key
  :ensure t
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 1))

#+end_src

* Completition

Vertico + Consult + Orderless + Embark + Marginalia + Corfu

** Vertico 

#+begin_src emacs-lisp

(use-package vertico
  :ensure t
  :init
  (vertico-mode 1)
  :config
  (setq vertico-count 25))

(use-package vertico-posframe
  :ensure t
  :config
  (vertico-posframe-mode 1)
  (setq vertico-posframe-width 100
        vertico-posframe-height vertico-count))

#+end_src

**  Savehist

Save minibuffer history

#+begin_src emacs-lisp

(use-package savehist
  :ensure t
  :init
  (savehist-mode 1))

#+end_src

** Marginalia

#+begin_src emacs-lisp

(use-package marginalia
  :ensure t
  :init 
  (marginalia-mode 1))

#+end_src

**  Corfu

#+begin_src emacs-lisp

(use-package corfu
  :ensure t
  :init
  (global-corfu-mode 1)
  (corfu-popupinfo-mode 1)
  :config
  (setq corfu-cycle t
        corfu-auto t
        corfu-auto-delay 0
        corfu-auto-prefix 2
        corfu-popupinfo-delay 0.5))

#+end_src

** Orderless

#+begin_src emacs-lisp

(use-package orderless
  :ensure t
  :config
  (setq completion-styles '(orderless basic partial-completion)
        completion-category-overrides '((file (styles basic partial-completion)))
        orderless-component-separator "[ |]"))

#+end_src

** Consult

#+begin_src emacs-lisp

(use-package orderless
  :ensure t
  :config
  (setq completion-styles '(orderless basic partial-completion)
        completion-category-overrides '((file (styles basic partial-completion)))
        orderless-component-separator "[ |]"))

#+end_src


* COMMAND LINE

#+begin_src emacs-lisp

(defalias 'yes-or-no-p 'y-or-n-p)

#+end_src
#+begin_src emacs-lisp

(use-package which-key
  :ensure t
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 0.3))

#+end_src

** Command log mode

#+begin_src emacs-lisp
;;(use-package command-log-mode)
#+end_src

* GLOBAL SETTINGS

#+begin_src emacs-lisp

;; rewrite selection

(delete-selection-mode t)
;; отсутствие строки выделить глифами рядом с полосой с номером строки

(setq-default indicate-empty-lines t)

#+end_src

* DASHBOARD

#+begin_src emacs-lisp

(use-package dashboard
  :ensure t
  :init
  (setq dashboard-projects-backend 'project-el
        dashboard-startup-banner nil
        dashboard-set-footer nil
        dashboard-page-separator "\n\n\n"
        dashboard-set-headling-icons t
        dashboard-set-file-icons t
        dashboard-center-content nil
        dashboard-items '((recents . 10)
                          (agenda . 5)
                          (bookmarks . 5)
                          (projects . 5)
                          (registers . 5)))
  :config
  (dashboard-setup-startup-hook)

  (dashboard-modify-heading-icons '((recents . "file-text")
                                    (bookmarks . "book"))))

#+end_src
  
* DEVELOPMENT
** MAGIT

#+begin_src emacs-lisp

(use-package magit
  :ensure t
  :commands (magit-status magit-get-current-branch)
  :custom
  (magit-display-buffer-function 'magit-display-buffer-same-window-except-diff-v1))

#+end_src

** LANGUAGES

*** Language Server

#+begin_src emacs-lisp
;; lsp-mode
(use-package company
  :ensure t
  :hook
  (dart-mode . global-company-mode))
(use-package lsp-ui  :ensure t)
(use-package lsp-mode
  :ensure t
  :commands (lsp lsp-deffered)
  :init
  (setq lsp-keymap-prefix "C-c l")
  :config
  (lsp-enable-which-key-integration t))

#+end_src

*** DART

#+begin_src emacs-lisp

(use-package dart-mode
  :ensure t
  :hook (dart-mode . lsp-deferred)
  :config
  (global-set-key (kbd "C-<f9>") 'lsp-dart-run)
  )
(use-package lsp-dart
  :ensure t
  :hook (dart-mode . lsp))

#+end_src
  
***  PYTHON

#+begin_src emacs-lisp

(use-package python-mode
  :ensure t)

#+end_src
*** LUA

#+begin_src emacs-lisp

(use-package lua-mode
  :ensure t)

#+end_src

** PROJECTILE

#+begin_src emacs-lisp

(use-package projectile
  :ensure t
  :config
  (projectile-global-mode 1)
  :bind-keymap
  ("C-c p" . projectile-command-map)
  )

#+end_src
  
# * POPUP
#   #+begin_src emacs-lisp
#     (use-package popup
#       :ensure t
#       :bind
#       (define-key popup-menu-keymap (kbd "C-n") 'popup-next)
#       (define-key popup-menu-keymap (kbd "TAB") 'popup-next)
#       (define-key popup-menu-keymap (kbd "<tab>") 'popup-next)
#       (define-key popup-menu-keymap (kbd "<backtab>") 'popup-previous)
#       (define-key popup-menu-keymap (kbd "C-p") 'popup-previous)
#     )
#   #+end_src

* SNIPPETS
#+begin_src emacs-lisp
;; YASNIPET PACKAGE

(use-package yasnippet
  :ensure t
  :config
  (setq yas/indent-line 'auto)
  (yas-global-mode 1)
  )

(defun yas-popup-isearch-prompt (prompt choices &optional display-fn)
  (when (featurep 'popup)
    (popup-menu*
     (mapcar
      (lambda (choice)
        (popup-make-item
         (or (and display-fn (funcall display-fn choice))
             choice)
         :value choice))
      choices)
     :prompt prompt
     ;; start isearch mode immediately
     :isearch t
     )))
(setq yas-prompt-functions
      '(yas-popup-isearch-prompt yas-ido-prompt yas-no-prompt))

#+end_src

* AUTOCOMPLETE
#+begin_src emacs-lisp
;; AUTOCOMPLETE PACKAGE
;; (use-package auto-complete
;;   :ensure t
;;   :config
;;   (ac-config-default)
;; )
#+end_src

* INTENDATION SETTINGS

#+begin_src emacs-lisp

;; DEFAULT TABULATION SIZE
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
(setq-default c-basic-offset 4)
(setq-default standart-indent 4)
;; switch beggining of lines
(global-set-key (kbd "C-a")         'back-to-indentation)
(global-set-key (kbd "C-S-a")       'move-beginning-of-line)
(setq-default org-edit-src-content-indentation 0)

#+end_src

* FUNCTIONS
#+begin_src emacs-lisp

(defun speedbar-up()
  (interactive)
  (speedbar-update-contents)
  (speedbar)
  )

#+end_src
  
* KEYBINDINGS

** GLOBAL

#+begin_src emacs-lisp

;; truncate lines
(global-set-key (kbd "<C-M-return>")'toggle-truncate-lines)
;; whitespace mode
(global-set-key (kbd "<f7>")        'whitespace-mode)
;; comment/uncomment
(global-set-key (kbd "C-;")         'comment-or-uncomment-region)
;; make Ctrl-` sequence waiting
(define-prefix-command 'ctr-w-pref)


;; change word/char moving

(global-set-key (kbd "C-f")         'forward-word)
(global-set-key (kbd "C-b")         'backward-word)
(global-set-key (kbd "M-f")         'forward-char)
(global-set-key (kbd "M-b")         'backward-char)
;; killing word
(global-set-key (kbd "C-,")         'backward-kill-word)
(global-set-key (kbd "C-.")         'kill-word)
;; use 'alt for changing windows

#+end_src

** buffer changes

#+begin_src emacs-lisp

(global-set-key (kbd "C-S-<tab>")   'bs-cycle-next)
(global-set-key (kbd "C-<tab>")     'bs-cycle-previous)
(global-set-key (kbd "<f5>")        'save-buffer)
(global-set-key (kbd "<f6>")        'revert-buffer)
(global-set-key (kbd "<f2>")        'bs-show)
(global-set-key (kbd "<f12>")       'speedbar-up)

#+end_src

** navigation

#+begin_src emacs-lisp
(global-set-key (kbd "C-`")             'ctr-w-pref)
(define-key ctr-w-pref (kbd "j")        'next-multiframe-window)
(define-key ctr-w-pref (kbd "k")        'previous-multiframe-window)
(define-key ctr-w-pref (kbd "<up>")     'windmove-up)
(define-key ctr-w-pref (kbd "<down>")   'windmove-down)
(define-key ctr-w-pref (kbd "<left>")   'windmove-left)
(define-key ctr-w-pref (kbd "<right>")  'windmove-right)

(define-key ctr-w-pref (kbd "g")        'goto-line)
(define-key ctr-w-pref (kbd "a")        'align-regexp)
;; (define-key ctr-w-pref (kbd "C-j")  'scroll-down-command)
;; (define-key ctr-w-pref (kbd "C-k")  'scroll-up-command)
;; (define-key ctr-w-pref (kbd "v")    'scroll-other-window)
;; (define-key ctr-w-pref (kbd "p")    'scroll-other-window-down)
(define-key ctr-w-pref (kbd "s")    'set-window-width)

#+end_src

** EXECUTIONS

#+begin_src emacs-lisp

(global-set-key (kbd "<f9>")         'compile)
(global-set-key (kbd "<C-f12>")      'eval-buffer)

#+end_src

* THEME
#+begin_src emacs-lisp

(use-package doom-themes
  :ensure t)
(load-theme 'doom-one t)
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :custom (doom-modeline-height 25))

#+end_src

* EVIL MODE
#+begin_src emacs-lisp

#+end_src

